//Example code for EZLan board
//Ethernet control; SD Card; Web Server; Request Handler
//
//
//Git Alistarec

#include <Arduino.h>
#include <WiFi.h>
#include <ETH.h>
#include <WebServer.h>
#include <ESPmDNS.h>
#include <SPI.h>
#include <SD.h>

const char *host = "EZlan";

// SD card defines
#define SCK 14
#define MISO 12
#define MOSI 13
#define CS 15
SPIClass spi = SPIClass(HSPI);

WebServer server(80);

#define RELAY_PIN_1 16
#define RELAY_PIN_2 4 

File webFile;

// LAN8720A parameters
#define ETH_POWER_PIN -1
#define ETH_ADDR 0
#define ETH_MDC_PIN 23
#define ETH_MDIO_PIN 18
#define ETH_NRST_PIN 5

static bool eth_connected = false;

void WiFiEvent(WiFiEvent_t event)
{
    switch (event)
    {
    case ARDUINO_EVENT_ETH_START:
        Serial.println("ETH Started");
        // set eth hostname here
        ETH.setHostname(host);
        break;
    case ARDUINO_EVENT_ETH_CONNECTED:
        Serial.println("ETH Connected");
        break;
    case ARDUINO_EVENT_ETH_GOT_IP:
        Serial.print("ETH MAC: ");
        Serial.print(ETH.macAddress());
        Serial.print(", IPv4: ");
        Serial.print(ETH.localIP());
        if (ETH.fullDuplex())
        {
            Serial.print(", FULL_DUPLEX");
        }
        Serial.print(", ");
        Serial.print(ETH.linkSpeed());
        Serial.println("Mbps");
        eth_connected = true;
        break;
    case ARDUINO_EVENT_ETH_DISCONNECTED:
        Serial.println("ETH Disconnected");
        eth_connected = false;
        break;
    case ARDUINO_EVENT_ETH_STOP:
        Serial.println("ETH Stopped");
        eth_connected = false;
        break;
    default:
        break;
    }
}
void eth_setup()
{
    // RST ETH_PHY - for reliable startup 
    pinMode(ETH_NRST_PIN, OUTPUT);
    digitalWrite(ETH_NRST_PIN, LOW);
    delay(500);
    digitalWrite(ETH_NRST_PIN, HIGH);
    //ETH PHY init                                                                //Clock generated by ESP
    WiFi.onEvent(WiFiEvent);
    ETH.begin(ETH_ADDR, ETH_POWER_PIN, ETH_MDC_PIN, ETH_MDIO_PIN, ETH_PHY_LAN8720, ETH_CLOCK_GPIO17_OUT);
}

void DNS_setup()
{
    if (MDNS.begin(host))
    {
        MDNS.addService("http", "tcp", 80);
        Serial.println("MDNS responder started");
        Serial.print("You can now connect to http://");
        Serial.print(host);
        Serial.println(".local");
    }
}



void handleRoot() {
  // Read HTML file on SD 
  File file = SD.open("/index.htm");
    
    if (server.streamFile(file, "text/html") != file.size())
    {
        Serial.println("Sent less data than expected!");
    }


   else {
    //404 when file was not found
    server.send(404, "text/plain", "File not found");
  }
    // Close the file
    file.close();
}

void handleRequest() {
  // Check if it's a relay control request
  if (server.uri() == "/relay") {
    // Get relay number from request
    String relayNumberStr = server.arg("number");
    int relayNumber = relayNumberStr.toInt();

    // Check if relay number is valid
    if (relayNumber != 1 && relayNumber != 2) {
      server.send(400, "text/plain", "Invalid relay number");
      return;
    }

    // Toggle the corresponding relay
    if (relayNumber == 1) {
      digitalWrite(RELAY_PIN_1, !digitalRead(RELAY_PIN_1));
    } else {
      digitalWrite(RELAY_PIN_2, !digitalRead(RELAY_PIN_2));
    }

    // Send response
    server.send(200, "text/plain", "Relay toggled");
    return;
  }
}

void handleTemperature() {  

  float temperatureC = 20.5;  //placeholder

  server.send(200, "text/plain", String(temperatureC));
}


void setup(void)
{
    Serial.begin(115200);
    Serial.print("\n");

    spi.begin(SCK, MISO, MOSI, CS);

    eth_setup();
    DNS_setup();
    //SD Init
    if (!SD.begin(CS, spi)) {
    Serial.println("SD card initialization failed");
    return;
  } 
    //Relay pins setup 
    pinMode(RELAY_PIN_1, OUTPUT);
    pinMode(RELAY_PIN_2, OUTPUT);

    //Webserver routes 
    server.on("/", handleRoot);
    server.on("/relay", handleRequest);
    server.on("/temperature", handleTemperature);

    server.begin();
    Serial.println("HTTP server started");
}




void loop() {
  // Handle client requests
  server.handleClient();
  delay(2);
}


 